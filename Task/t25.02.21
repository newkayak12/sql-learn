--1. 윤은해와 급여가 같은 사원들을 검색해서, 사원번호,사원이름, 급여를 출력하라.

SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE  SALARY = (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '윤은해')  AND EMP_NAME != '윤은해';





--2. EMPLOYEE 테이블에서 기본급여가 제일 많은 사람과 제일 적은 사람의 정보를 
-- 사번, 사원명, 기본급여를 나타내세요.

SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY  = (SELECT MAX(SALARY) FROM EMPLOYEE  ) 
                            OR
            SALARY = (SELECT MIN (SALARY) FROM EMPLOYEE);                    




--3. D1, D2부서에 근무하는 사원들 중에서
--기본급여가 D5 부서 직원들의 '평균월급' 보다 많은 사람들만 
--부서번호, 사원번호, 사원명, 월급을 나타내세요.





SELECT DEPT_CODE, EMP_ID,  EMP_NAME, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D1','D2')
                        AND
            SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE WHERE DEPT_CODE = 'D5');            






-- 차태연, 전지연 사원의 급여등급(EMPLYEE테이블의 SAL_LEVEL컬럼)과 같은 사원의 직급명, 사원명을 출력.

SELECT  JOB_NAME, EMP_NAME
FROM EMPLOYEE E  JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE) 
WHERE SAL_LEVEL IN (
                                SELECT SAL_LEVEL
                                FROM EMPLOYEE
                                WHERE DEPT_CODE IN ('D1','D2')
                                            AND
                                SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE WHERE DEPT_CODE = 'D5')
                                
                            );           

--1.직급이 대표, 부사장이 아닌 모든 사원을 부서별로 출력. 

SELECT DEPT_TITLE, E.*
FROM EMPLOYEE E  JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
                            JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
WHERE  JOB_NAME NOT IN ('대표', '부사장')
ORDER BY 1;



--2.ASIA1지역에 근무하는 사원 정보출력, 부서코드, 사원명.(메인쿼리 조인금지)

SELECT DEPT_CODE, EMP_NAME
FROM EMPLOYEE 
WHERE DEPT_CODE IN (SELECT DEPT_ID FROM  DEPARTMENT  
                                                            JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE) WHERE LOCAL_NAME = 'ASIA1');
            

SELECT *
FROM DEPARTMENT;

SELECT *
FROM LOCATION;

    

--1. 2000년1월1일 이전 입사자중에 2000년 1월1일 이후 입사자보다 급여를 (가장 높게 받는 사원보다) 
--적게 받는 사원의 사원명과 월급여를 출력하세요.

SELECT EMP_NAME, SALARY 
FROM EMPLOYEE
WHERE HIRE_DATE < ('2000/01/01')
                    AND
        SALARY > (SELECT MAX(SALARY) FROM EMPLOYEE WHERE HIRE_DATE > ('2000/01/01'));



--2. 어떤 'J4'직급의 사원보다 많은 급여를 받는 직급이 J5, J6, J7인 사원 출력.
SELECT *
FROM(
            SELECT *  
            FROM EMPLOYEE 
            WHERE JOB_CODE IN ('J5','J6','J7'))
WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEE WHERE JOB_CODE = 'J4');



--3. D1 부서의 사원(전체)보다 입사가 늦은 사원들의 정보를 검색하고, 이름, 부서번호, 입사일을 출력하라.



SELECT EMP_NAME, DEPT_CODE, HIRE_DATE
FROM EMPLOYEE
WHERE HIRE_DATE > ALL (SELECT HIRE_DATE FROM EMPLOYEE WHERE DEPT_CODE = 'D1');



-- 4.  '인사관리부'의 사원전체보다 입사가 늦은 사원들의 정보를 검색하고, 이름, 부서명, 입사일로 출력.

SELECT EMP_NAME, DEPT_CODE, HIRE_DATE
FROM EMPLOYEE
WHERE HIRE_DATE > ALL( SELECT HIRE_DATE FROM EMPLOYEE JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID) WHERE DEPT_TITLE = '인사관리부');







----기술지원부이면서 급여가 2000000인 사원이 있다고 한다.
--해당사원의 이름, 부서코드, 급여를 출력하기
--형식을 부여함.

SELECT EMP_NAME, JOB_CODE, TO_CHAR(SALARY, '999,999,999,999')
FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = '기술지원부' AND SALARY > 2000000; 



--3. 직급이 J1, J2, J3이 아닌 사원중에서 자신의 부서별 평균급여보다 많은 급여를 받는 사원출력.
-- 부서코드, 사원명, 급여, 부서별 급여평균
SELECT DEPT_CODE, AVG(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE;

SELECT DEPT_CODE, EMP_NAME,SALARY,(SELECT AVG(SALARY) FROM EMPLOYEE L WHERE E.DEPT_CODE = L.DEPT_CODE)
FROM EMPLOYEE E
WHERE DEPT_CODE NOT IN ('J1','J2','J3')AND SALARY >  (SELECT AVG(SALARY) FROM EMPLOYEE L WHERE E.DEPT_CODE = L.DEPT_CODE)
ORDER BY 1;

SELECT DEPT_CODE, AVG(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE
ORDER BY 1;








-- 
SELECT DEPT_CODE, EMP_NAME, SALARY, E.AVG(SALARY)
FROM EMPLOYEE L JOIN (SELECT DEPT_CODE, AVG(SALARY)
                                FROM EMPLOYEE
                                GROUP BY DEPT_CODE) E
                        ON    (E.DEPT_CODE = L.DEPT_CODE)  ;
                        
              
----
SELECT E.DEPT_CODE, E.EMP_NAME, E.SALARY
FROM (
            SELECT DEPT_CODE, EMP_NAME, SALARY
            FROM EMPLOYEE 
            WHERE DEPT_CODE NOT IN ('J1', 'J2', 'J3')
            ORDER BY 1
         
        )E
WHERE   E. SALARY   > (  SELECT AVG(SALARY) 
                                  FROM EMPLOYEE 
                                  GROUP BY DEPT_CODE);
            



-- 차태연, 전지연 사원의 급여등급(EMPLYEE테이블의 SAL_LEVEL컬럼)과 같은 사원의 직급명, 사원명을 출력.
SELECT SAL_LEVEL, EMP_NAME, JOB_NAME
FROM EMPLOYEE JOIN JOB USING (JOB_CODE)
WHERE SAL_LEVEL IN (SELECT SAL_LEVEL FROM EMPLOYEE WHERE EMP_NAME IN ('차태연', '전지연'));


-- SELECT문 종합
--1. 
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = '기술지원부';

--2.
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE E JOIN DEPARTMENT L ON (E.DEPT_CODE = L.DEPT_ID)
WHERE DEPT_TITLE = '기술지원부' 
                AND
            SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE  J WHERE E.DEPT_CODE =J.DEPT_CODE );
            
            
--3 

--3.1
SELECT L.EMP_ID AS "사원의 사번", L.EMP_NAME  AS "사원" , E.EMP_NAME  AS "매니저", L.SALARY AS "사원의 월급"
FROM EMPLOYEE E JOIN EMPLOYEE L ON (E.EMP_ID = L.MANAGER_ID);

--3.2
SELECT E1.EMP_ID, E1.EMP_NAME, (SELECT M.EMP_NAME FROM EMPLOYEE M WHERE M.EMP_ID = E1.MANAGER_ID) AS "매니저 이름", E1.SALARY
FROM EMPLOYEE E1;


SELECT *
FROM EMPLOYEE;
            
            
--4. 
SELECT E.EMP_NAME, E.DEPT_CODE, E.SALARY, E.SAL_LEVEL
FROM EMPLOYEE E
WHERE E.SALARY >= (SELECT AVG(M.SALARY) FROM EMPLOYEE M WHERE E.JOB_CODE = M.JOB_CODE) ;



SELECT *
FROM EMPLOYEE;
SELECT *
FROM SAL_GRADE;

--5. \
SELECT DEPT_TITLE, FLOOR(AVG(SALARY))
FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
GROUP BY DEPT_TITLE
HAVING AVG(SALARY) >2200000;


--6
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, (SALARY + (SALARY  * NVL(BONUS,1)))*12 AS "연봉"
FROM EMPLOYEE E JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE)
                        JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
WHERE (((SALARY + (SALARY  * NVL(BONUS,1)))*12) < (SELECT AVG((SALARY + (SALARY  * NVL(BONUS,1)))*12)
                                                                                             FROM EMPLOYEE  L       
                                                                                             WHERE E.JOB_CODE = L.JOB_CODE)) 
                                                        AND 
                                                        
                                SUBSTR(EMP_NO, 8, 1) = '2';
                        
                        
